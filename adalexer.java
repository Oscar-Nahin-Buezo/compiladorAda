// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: analizadorFLex.flex


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class adalexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\4\1\22\0\1\2\1\0\1\3\1\4\2\0"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\11\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\0\1\26\1\27\1\30\2\27\1\31\2\27"+
    "\1\32\11\27\1\33\7\27\4\0\1\34\1\0\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\27\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\27\1\0\1\65\10\0\1\1\u01a2\0\2\1\326\0"+
    "\u0100\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\4"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\1\1\23\31\24\1\25"+
    "\1\26\1\0\1\27\1\30\1\31\1\32\1\33\1\17"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\12\24\1\44\47\24\1\44\110\24\1\45\25\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\66\0\154\0\66\0\66\0\66"+
    "\0\66\0\66\0\242\0\66\0\66\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\66\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce"+
    "\0\66\0\66\0\154\0\66\0\66\0\66\0\66\0\u0804"+
    "\0\u083a\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u02f4\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde"+
    "\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e"+
    "\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee"+
    "\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e"+
    "\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe"+
    "\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae"+
    "\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e"+
    "\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e"+
    "\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe"+
    "\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e"+
    "\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e"+
    "\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u02f4\0\u222c\0\u2262\0\u2298"+
    "\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448"+
    "\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8"+
    "\0\u262e\0\u2664";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\2\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\31\1\45\1\31\1\46"+
    "\1\47\1\50\1\51\1\52\1\31\1\53\1\54\1\55"+
    "\1\56\1\31\1\57\1\60\1\31\1\61\71\0\1\62"+
    "\13\0\2\63\5\0\6\63\1\0\30\63\12\0\1\64"+
    "\70\0\1\65\66\0\1\66\74\0\1\67\56\0\1\70"+
    "\65\0\1\70\1\0\2\71\71\0\1\72\64\0\1\73"+
    "\1\74\1\75\64\0\1\76\1\77\64\0\1\100\1\101"+
    "\57\0\2\31\5\0\27\31\1\102\7\31\20\0\2\31"+
    "\5\0\37\31\20\0\2\31\5\0\16\31\1\103\20\31"+
    "\20\0\2\31\5\0\21\31\1\104\15\31\20\0\2\31"+
    "\5\0\23\31\1\105\13\31\20\0\2\31\5\0\31\31"+
    "\1\106\5\31\20\0\2\31\5\0\10\31\1\107\1\110"+
    "\7\31\1\111\1\31\1\112\3\31\1\113\1\31\1\114"+
    "\5\31\20\0\2\31\5\0\13\31\1\115\10\31\1\116"+
    "\12\31\20\0\2\31\5\0\7\31\1\117\14\31\1\120"+
    "\12\31\20\0\2\31\5\0\13\31\1\121\3\31\1\122"+
    "\4\31\1\114\12\31\20\0\2\31\5\0\21\31\1\123"+
    "\1\31\1\124\11\31\1\125\1\31\20\0\2\31\5\0"+
    "\24\31\1\126\5\31\1\127\4\31\20\0\2\31\5\0"+
    "\13\31\1\130\10\31\1\131\12\31\20\0\2\31\5\0"+
    "\14\31\1\114\6\31\1\114\4\31\1\114\6\31\20\0"+
    "\2\31\5\0\17\31\1\132\4\31\1\133\12\31\20\0"+
    "\2\31\5\0\24\31\1\112\12\31\20\0\2\31\5\0"+
    "\13\31\1\134\10\31\1\135\5\31\1\136\4\31\20\0"+
    "\2\31\5\0\14\31\1\114\12\31\1\114\1\31\1\137"+
    "\1\135\4\31\20\0\2\31\5\0\7\31\1\140\17\31"+
    "\1\141\7\31\20\0\2\31\5\0\7\31\1\142\3\31"+
    "\1\143\23\31\20\0\2\31\5\0\13\31\1\144\16\31"+
    "\1\145\4\31\20\0\2\31\5\0\7\31\1\146\3\31"+
    "\1\147\2\31\1\150\17\31\1\151\20\0\2\31\5\0"+
    "\23\31\1\152\4\31\1\153\6\31\20\0\2\31\5\0"+
    "\16\31\1\154\1\155\17\31\20\0\2\31\5\0\24\31"+
    "\1\126\12\31\20\0\2\70\64\0\2\71\64\0\2\31"+
    "\5\0\27\31\1\156\7\31\20\0\2\31\5\0\7\31"+
    "\1\157\27\31\20\0\2\31\5\0\24\31\1\160\12\31"+
    "\20\0\2\31\5\0\31\31\1\161\5\31\20\0\2\31"+
    "\5\0\27\31\1\162\7\31\20\0\2\31\5\0\24\31"+
    "\1\163\3\31\1\164\6\31\20\0\2\31\5\0\11\31"+
    "\1\165\25\31\20\0\2\31\5\0\17\31\1\166\1\31"+
    "\1\114\15\31\20\0\2\31\5\0\12\31\1\114\24\31"+
    "\20\0\2\31\5\0\27\31\1\167\7\31\20\0\2\31"+
    "\5\0\15\31\1\170\21\31\20\0\2\31\5\0\12\31"+
    "\1\171\24\31\20\0\2\31\5\0\30\31\1\153\6\31"+
    "\20\0\2\31\5\0\23\31\1\172\13\31\20\0\2\31"+
    "\5\0\11\31\1\173\7\31\1\174\15\31\20\0\2\31"+
    "\5\0\15\31\1\175\21\31\20\0\2\31\5\0\30\31"+
    "\1\176\6\31\20\0\2\31\5\0\12\31\1\114\16\31"+
    "\1\177\5\31\20\0\2\31\5\0\11\31\1\200\5\31"+
    "\1\135\17\31\20\0\2\31\5\0\27\31\1\114\7\31"+
    "\20\0\2\31\5\0\23\31\1\201\13\31\20\0\2\31"+
    "\5\0\23\31\1\202\13\31\20\0\2\31\5\0\31\31"+
    "\1\203\5\31\20\0\2\31\5\0\22\31\1\204\14\31"+
    "\20\0\2\31\5\0\24\31\1\205\12\31\20\0\2\31"+
    "\5\0\34\31\1\114\2\31\20\0\2\31\5\0\31\31"+
    "\1\114\5\31\20\0\2\31\5\0\21\31\1\206\15\31"+
    "\20\0\2\31\5\0\16\31\1\207\20\31\20\0\2\31"+
    "\5\0\11\31\1\210\25\31\20\0\2\31\5\0\7\31"+
    "\1\211\7\31\1\212\4\31\1\213\12\31\20\0\2\31"+
    "\5\0\17\31\1\117\3\31\1\214\13\31\20\0\2\31"+
    "\5\0\11\31\1\215\10\31\1\114\1\216\2\31\1\217"+
    "\2\31\1\220\1\31\1\221\3\31\20\0\2\31\5\0"+
    "\21\31\1\222\3\31\1\223\11\31\20\0\2\31\5\0"+
    "\10\31\1\224\26\31\20\0\2\31\5\0\15\31\1\225"+
    "\12\31\1\226\6\31\20\0\2\31\5\0\27\31\1\227"+
    "\7\31\20\0\2\31\5\0\13\31\1\230\23\31\20\0"+
    "\2\31\5\0\25\31\1\153\11\31\20\0\2\31\5\0"+
    "\31\31\1\231\5\31\20\0\2\31\5\0\13\31\1\114"+
    "\23\31\20\0\2\31\5\0\13\31\1\230\3\31\1\232"+
    "\17\31\20\0\2\31\5\0\31\31\1\233\5\31\20\0"+
    "\2\31\5\0\7\31\1\234\27\31\20\0\2\31\5\0"+
    "\27\31\1\235\7\31\20\0\2\31\5\0\7\31\1\236"+
    "\27\31\20\0\2\31\5\0\13\31\1\237\23\31\20\0"+
    "\2\31\5\0\17\31\1\240\17\31\20\0\2\31\5\0"+
    "\27\31\1\135\7\31\20\0\2\31\5\0\31\31\1\241"+
    "\5\31\20\0\2\31\5\0\13\31\1\242\23\31\20\0"+
    "\2\31\5\0\7\31\1\243\27\31\20\0\2\31\5\0"+
    "\7\31\1\171\27\31\20\0\2\31\5\0\17\31\1\230"+
    "\17\31\20\0\2\31\5\0\36\31\1\114\20\0\2\31"+
    "\5\0\30\31\1\244\6\31\20\0\2\31\5\0\21\31"+
    "\1\245\15\31\20\0\2\31\5\0\7\31\1\171\21\31"+
    "\1\246\5\31\20\0\2\31\5\0\17\31\1\247\17\31"+
    "\20\0\2\31\5\0\13\31\1\114\3\31\1\250\17\31"+
    "\20\0\2\31\5\0\27\31\1\171\7\31\20\0\2\31"+
    "\5\0\13\31\1\251\23\31\20\0\2\31\5\0\11\31"+
    "\1\252\25\31\20\0\2\31\5\0\13\31\1\253\23\31"+
    "\20\0\2\31\5\0\24\31\1\114\12\31\20\0\2\31"+
    "\5\0\17\31\1\254\17\31\20\0\2\31\5\0\25\31"+
    "\1\114\11\31\20\0\2\31\5\0\21\31\1\114\15\31"+
    "\20\0\2\31\5\0\13\31\1\255\23\31\20\0\2\31"+
    "\5\0\20\31\1\256\16\31\20\0\2\31\5\0\15\31"+
    "\1\257\21\31\20\0\2\31\5\0\33\31\1\260\3\31"+
    "\20\0\2\31\5\0\11\31\1\261\17\31\1\262\5\31"+
    "\20\0\2\31\5\0\15\31\1\153\21\31\20\0\2\31"+
    "\5\0\24\31\1\263\12\31\20\0\2\31\5\0\7\31"+
    "\1\264\27\31\20\0\2\31\5\0\32\31\1\265\4\31"+
    "\20\0\2\31\5\0\32\31\1\266\4\31\20\0\2\31"+
    "\5\0\13\31\1\267\23\31\20\0\2\31\5\0\13\31"+
    "\1\270\23\31\20\0\2\31\5\0\7\31\1\271\27\31"+
    "\20\0\2\31\5\0\31\31\1\272\5\31\20\0\2\31"+
    "\5\0\15\31\1\273\21\31\20\0\2\31\5\0\20\31"+
    "\1\114\16\31\20\0\2\31\5\0\22\31\1\274\14\31"+
    "\20\0\2\31\5\0\23\31\1\114\13\31\20\0\2\31"+
    "\5\0\17\31\1\206\17\31\20\0\2\31\5\0\21\31"+
    "\1\153\15\31\20\0\2\31\5\0\16\31\1\114\20\31"+
    "\20\0\2\31\5\0\36\31\1\275\20\0\2\31\5\0"+
    "\7\31\1\276\27\31\20\0\2\31\5\0\31\31\1\275"+
    "\5\31\20\0\2\31\5\0\15\31\1\277\21\31\20\0"+
    "\2\31\5\0\23\31\1\300\13\31\20\0\2\31\5\0"+
    "\27\31\1\301\7\31\20\0\2\31\5\0\25\31\1\135"+
    "\2\31\1\302\6\31\20\0\2\31\5\0\30\31\1\273"+
    "\6\31\20\0\2\31\5\0\31\31\1\303\5\31\20\0"+
    "\2\31\5\0\7\31\1\304\27\31\20\0\2\31\5\0"+
    "\7\31\1\114\27\31\20\0\2\31\5\0\31\31\1\302"+
    "\5\31\20\0\2\31\5\0\14\31\1\114\22\31\20\0"+
    "\2\31\5\0\25\31\1\252\11\31\20\0\2\31\5\0"+
    "\31\31\1\305\5\31\20\0\2\31\5\0\27\31\1\306"+
    "\7\31\20\0\2\31\5\0\31\31\1\273\5\31\20\0"+
    "\2\31\5\0\27\31\1\302\7\31\20\0\2\31\5\0"+
    "\7\31\1\214\27\31\20\0\2\31\5\0\22\31\1\246"+
    "\14\31\20\0\2\31\5\0\7\31\1\307\27\31\20\0"+
    "\2\31\5\0\13\31\1\310\23\31\20\0\2\31\5\0"+
    "\13\31\1\311\23\31\20\0\2\31\5\0\27\31\1\112"+
    "\7\31\20\0\2\31\5\0\22\31\1\312\14\31\20\0"+
    "\2\31\5\0\13\31\1\313\23\31\20\0\2\31\5\0"+
    "\27\31\1\230\7\31\20\0\2\31\5\0\27\31\1\117"+
    "\7\31\20\0\2\31\5\0\11\31\1\135\25\31\20\0"+
    "\2\31\5\0\27\31\1\260\7\31\20\0\2\31\5\0"+
    "\36\31\1\151\20\0\2\31\5\0\13\31\1\112\23\31"+
    "\20\0\2\31\5\0\17\31\1\314\17\31\20\0\2\31"+
    "\5\0\11\31\1\315\25\31\20\0\2\31\5\0\13\31"+
    "\1\316\23\31\20\0\2\31\5\0\15\31\1\275\21\31"+
    "\20\0\2\31\5\0\7\31\1\270\27\31\20\0\2\31"+
    "\5\0\30\31\1\114\6\31\20\0\2\31\5\0\7\31"+
    "\1\317\27\31\20\0\2\31\5\0\27\31\1\153\7\31"+
    "\20\0\2\31\5\0\17\31\1\320\17\31\20\0\2\31"+
    "\5\0\17\31\1\321\17\31\20\0\2\31\5\0\31\31"+
    "\1\153\5\31\20\0\2\31\5\0\12\31\1\322\24\31"+
    "\20\0\2\31\5\0\11\31\1\254\25\31\20\0\2\31"+
    "\5\0\13\31\1\302\23\31\20\0\2\31\5\0\32\31"+
    "\1\153\4\31\20\0\2\31\5\0\23\31\1\260\13\31"+
    "\20\0\2\31\5\0\31\31\1\277\5\31\20\0\2\31"+
    "\5\0\27\31\1\275\7\31\20\0\2\31\5\0\23\31"+
    "\1\135\13\31\20\0\2\31\5\0\24\31\1\230\12\31"+
    "\20\0\2\31\5\0\11\31\1\114\25\31\20\0\2\31"+
    "\5\0\32\31\1\304\4\31\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9882];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\5\11\1\1\2\11\6\1\1\11"+
    "\34\1\2\11\1\0\4\11\2\1\10\11\221\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  adalexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println(yytext() + "\t\t ERROR");
            }
            // fall through
          case 38: break;
          case 2:
            { System.out.print(yytext());
            }
            // fall through
          case 39: break;
          case 3:
            { 
            }
            // fall through
          case 40: break;
          case 4:
            { System.out.println(yytext() + "\t\t apostrofe");
            }
            // fall through
          case 41: break;
          case 5:
            { System.out.println(yytext() + "\t\t NUMERO SIGN");
            }
            // fall through
          case 42: break;
          case 6:
            { System.out.println(yytext() + "\t\t AMPERSAND");
            }
            // fall through
          case 43: break;
          case 7:
            { System.out.println(yytext() + "\t\t LEFT PARENTHESIS");
            }
            // fall through
          case 44: break;
          case 8:
            { System.out.println(yytext() + "\t\t RIGHT PARENTHESIS");
            }
            // fall through
          case 45: break;
          case 9:
            { System.out.println(yytext() +"\t\t OPERADOR DE MULTIPLICACION");
            }
            // fall through
          case 46: break;
          case 10:
            { System.out.println(yytext() +"\t\t OPERADOR DE SUMA");
            }
            // fall through
          case 47: break;
          case 11:
            { System.out.println(yytext() + "\t\t coma");
            }
            // fall through
          case 48: break;
          case 12:
            { System.out.println(yytext() +"\t\t OPERADOR DE RESTA");
            }
            // fall through
          case 49: break;
          case 13:
            { System.out.println(yytext() + "\t\t punto");
            }
            // fall through
          case 50: break;
          case 14:
            { System.out.println(yytext() +"\t\t OPERADOR DE DIVISION");
            }
            // fall through
          case 51: break;
          case 15:
            { System.out.println(yytext() +"\t\t ENTERO");
            }
            // fall through
          case 52: break;
          case 16:
            { System.out.println(yytext() +"\t\t dos_puntos");
            }
            // fall through
          case 53: break;
          case 17:
            { System.out.println(yytext() + "\t\t punto_coma");
            }
            // fall through
          case 54: break;
          case 18:
            { System.out.println(yytext() +"\t\t OPERADOR MENOR QUE ");
            }
            // fall through
          case 55: break;
          case 19:
            { System.out.println(yytext() +"\t\t OPERADOR MAYOR QUE ");
            }
            // fall through
          case 56: break;
          case 20:
            { System.out.println(yytext() +"\t\t IDENTIFICADOR");
            }
            // fall through
          case 57: break;
          case 21:
            { System.out.println(yytext() +"\t\t OPERADOR BOOLEANO ");
            }
            // fall through
          case 58: break;
          case 22:
            { System.out.println(yytext() +"\t\t STRING");
            }
            // fall through
          case 59: break;
          case 23:
            { System.out.println(yytext() + "\t\t DOUBLE STAR");
            }
            // fall through
          case 60: break;
          case 24:
            { System.out.println(yytext() + "\t\t guion");
            }
            // fall through
          case 61: break;
          case 25:
            { System.out.println(yytext() + "\t\t DOUBLE DOT");
            }
            // fall through
          case 62: break;
          case 26:
            { System.out.println(yytext() +"\t\t OPERADOR DEVISOR O ESCALABILIDAD ");
            }
            // fall through
          case 63: break;
          case 27:
            { System.out.println(yytext() +"\t\t DECIMAL");
            }
            // fall through
          case 64: break;
          case 28:
            { System.out.println(yytext() +"\t\t ASIGNACION");
            }
            // fall through
          case 65: break;
          case 29:
            { System.out.println(yytext() + "\t\t LEFT LABEL");
            }
            // fall through
          case 66: break;
          case 30:
            { System.out.println(yytext() +"\t\t OPERADOR MENOR O IGUAL ");
            }
            // fall through
          case 67: break;
          case 31:
            { System.out.println(yytext() + "\t\t BOX");
            }
            // fall through
          case 68: break;
          case 32:
            { System.out.println(yytext() +"\t\t OPERADOR DE IGUALDAD ");
            }
            // fall through
          case 69: break;
          case 33:
            { System.out.println(yytext() + "\t\t flecha");
            }
            // fall through
          case 70: break;
          case 34:
            { System.out.println(yytext() +"\t\t OPERADOR MAYOR O IGUAL ");
            }
            // fall through
          case 71: break;
          case 35:
            { System.out.println(yytext() + "\t\t RIGHT LABEL");
            }
            // fall through
          case 72: break;
          case 36:
            { System.out.println(yytext() +"\t\t PALABRA_RESERVADA WORD");
            }
            // fall through
          case 73: break;
          case 37:
            { System.out.println(yytext() + "\t\t DATA TYPE");
            }
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java adalexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        adalexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new adalexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
